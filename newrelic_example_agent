#! /usr/bin/env ruby

#
# This is an example agent which generates synthetic data.
# A 1mHz (one cycle every 16 minutes) sin+1, cos+1 and sin+5 wave is generated,
# using the Unix epoch as the base.
#

require 'rubygems'
require 'bundler/setup'
require 'snmp'

require 'newrelic_plugin'

module ExampleAgent
  class Agent < NewRelic::Plugin::Agent::Base

    def cpu(manager)
      response = manager.get(['1.3.6.1.4.1.2021.11.9.0'])
      response.each_varbind do |vb|
        puts "#{vb.name.to_s}  #{vb.value.to_s}  #{vb.value.asn1_type}"
        return 100 - vb.value.to_f
      end
    end

    def mem_total(manager)
      response = manager.get(['1.3.6.1.4.1.2021.4.5.0'])
      response.each_varbind do |vb|
        puts "#{vb.name.to_s}  #{vb.value.to_s}  #{vb.value.asn1_type}"
        return vb.value.to_f
      end
    end

    def mem_free(manager)
      response = manager.get(['1.3.6.1.4.1.2021.4.6.0'])
      response.each_varbind do |vd|
        puts "#{vd.name.to_s}  #{vd.value.to_s}  #{vd.value.asn1_type}"
        return vd.value.to_i
      end
    end

    def mem_total_buffer(manager)
      response = manager.get(["1.3.6.1.4.1.2021.4.14.0"])
      response.each_varbind do |vd|
        puts "#{vd.name.to_s}  #{vd.value.to_s}  #{vd.value.asn1_type}"
        return vd.value.to_i
      end
    end

    def mem_total_cache(manager)
      response = manager.get(["1.3.6.1.4.1.2021.4.15.0"])
      response.each_varbind do |vd|
        puts "#{vd.name.to_s}  #{vd.value.to_s}  #{vd.value.asn1_type}"
        return vd.value.to_i
      end
    end

    def get_avio()
      return `(atop 2 2 | grep avio |  awk '{print $15}' | paste -s -d'+' | sed 's/^/scale=3; (/' | sed 's|$|)/2|' | bc)`
    end

    def disk_percent(manager)
      response = manager.get(["    1.3.6.1.4.1.2021.9.1.9.1"])
      response.each_varbind do |vd|
        puts "#{vd.name.to_s}  #{vd.value.to_s}  #{vd.value.asn1_type}"
        return vd.value.to_i
      end
    end

    def disk_load()
      puts `(snmptable -v 2c -c redBorder 127.0.0.1 diskIOTable|grep ' dm-0 ' | awk '{print $7}')`.strip.to_i
      return 1
    end

    def memory_total_druid_broker()
      puts `(sudo /opt/rb/bin/rb_mem.sh -f /opt/rb/var/sv/druid_broker/supervise/pid 2>/dev/null)`.strip.to_i
      return 1
    end

    agent_guid 'com.none.redbordermanager'
    agent_version '1.0.2'
    agent_config_options :hertz # frequency of the periodic functions
    agent_human_labels('Manager') { 'redborder' }

    def poll_cycle
      #   puts `top -b -n2 | grep 'Cpu(s)'|tail -n 1 | awk '{print $2 + $4}'`
      #  report_metric 'CPU', 'Value', `top -b -n2 |
      # grep 'Cpu(s)'|tail -n 1 | awk '{print $2 + $4}'`
      SNMP::Manager.open(community: 'redBorder', host: '10.0.203.8') do |manager|
        # response = manager.get(['sysDescr.0', 'sysName.0'])
        memory = 100 * (mem_total(manager) - mem_free(manager) - mem_total_buffer(manager) - mem_total_cache(manager))
        report_metric 'CPU', 'Value', cpu(manager)
        report_metric 'MEM_TOTAL', 'Value', mem_total(manager)
        report_metric 'MEM_FREE', 'Value', mem_free(manager)
        report_metric 'MEM_TOTAL_BUFFER', 'Value', mem_total_buffer(manager)
        report_metric 'MEM_TOTAL_CACHE', 'Value', mem_total_cache(manager)
        report_metric 'MEM', 'Value', memory/mem_total(manager)
        # (disk utilization)avio shows the average number of milliseconds p/req
        report_metric 'AVIO', 'Value', get_avio()
        report_metric 'DISK_PERCENT', 'Value', disk_percent(manager)
        report_metric 'DISK_LOAD', 'Value', disk_load()
        report_metric 'MEMORY_DRUID_BROKER', 'Value', 100*memory_total_druid_broker()/mem_total(manager)
      end
    end
  end

  #
  # Register this agent with the component.
  # The ExampleAgent is the name of the module that defines this
  # driver (the module must contain at least three classes - a
  # PollCycle, a Metric and an Agent class, as defined above).
  #
  NewRelic::Plugin::Setup.install_agent :example, ExampleAgent

  #
  # Launch the agent; this never returns.
  #
  NewRelic::Plugin::Run.setup_and_run
end
