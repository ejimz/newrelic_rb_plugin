#! /usr/bin/env ruby

#
# This is an example agent which generates synthetic data.
# A 1mHz (one cycle every 16 minutes) sin+1, cos+1 and sin+5 wave is generated,
# using the Unix epoch as the base.
#

require 'rubygems'
require 'bundler/setup'
require 'snmp'

require 'newrelic_plugin'

module ExampleAgent
  class Agent < NewRelic::Plugin::Agent::Base

    def cpu(manager)
      response = manager.get(['1.3.6.1.4.1.2021.11.9.0'])
      response.each_varbind do |vb|
        puts "#{vb.name.to_s}  #{vb.value.to_s}  #{vb.value.asn1_type}"
        return 100 - vb.value.to_f
      end
    end

    def memTotal(manager)
      response = manager.get(['1.3.6.1.4.1.2021.4.5.0'])
      response.each_varbind do |vb|
        puts "#{vb.name.to_s}  #{vb.value.to_s}  #{vb.value.asn1_type}"
        return vb.value.to_f
      end
    end
    
    agent_guid 'com.none.onlytesting'
    agent_version '1.0.1'
    agent_config_options :hertz # frequency of the periodic functions
    agent_human_labels('Example Agent') { 'Synthetic example data' }

    def poll_cycle
      #   puts `top -b -n2 | grep 'Cpu(s)'|tail -n 1 | awk '{print $2 + $4}'`
      #  report_metric 'CPU', 'Value', `top -b -n2 |
      # grep 'Cpu(s)'|tail -n 1 | awk '{print $2 + $4}'`
      SNMP::Manager.open(community: 'redBorder', host: '10.0.203.8') do |manager|
        # response = manager.get(['sysDescr.0', 'sysName.0'])
        report_metric 'CPU', 'Value', cpu(manager)
        report_metric 'MEM_TOTAL', 'Value', memTotal(manager)
    end
  end
end

  #
  # Register this agent with the component.
  # The ExampleAgent is the name of the module that defines this
  # driver (the module must contain at least three classes - a
  # PollCycle, a Metric and an Agent class, as defined above).
  #
  NewRelic::Plugin::Setup.install_agent :example, ExampleAgent

  #
  # Launch the agent; this never returns.
  #
  NewRelic::Plugin::Run.setup_and_run
end
